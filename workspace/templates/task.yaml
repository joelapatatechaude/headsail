---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: headsail-challenge-sync
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/categories: Openshift
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: deploy
    tekton.dev/displayName: "Headsail challenge sync"
    tekton.dev/platforms: "linux/amd64"
spec:
  workspaces:
    - name: manifest-dir
      optional: true
      description: >-
        The workspace which contains kubernetes manifests which we want to apply on the cluster.
    - name: kubeconfig-dir
      optional: true
      description: >-
        The workspace which contains the the kubeconfig file if in case we want to run the oc command on another cluster.
    - name: argocd-dir
      optional: false
      description: The workspace used to pass the argocd server and secrets.
  description: >-
    This task sync (deploys) headsail challenges using Argo CD and waits for it to be healthy.

  params:
    - name: student-workspace
      description: name of the student workspace to sync
      default: production-student-1
      type: string
    - name: challenge
      type: string
      default: challenge-1
    - name: oc-version
      description: The OpenShift Version to use
      type: string
      default: "4.7"
    - name: argocd-version
      type: string
      default: v2.2.2
    - name: argocd-namespace
      type: string
      default: openshift-gitops
    - name: flags
      default: --
      type: string
  steps:
    - name: oc
      image: quay.io/openshift/origin-cli:$(params.oc-version)
      script: |
        #!/usr/bin/env bash

        [[ "$(workspaces.manifest-dir.bound)" == "true" ]] && \
        cd $(workspaces.manifest-dir.path)

        [[ "$(workspaces.kubeconfig-dir.bound)" == "true" ]] && \
        [[ -f $(workspaces.kubeconfig-dir.path)/kubeconfig ]] && \
        export KUBECONFIG=$(workspaces.kubeconfig-dir.path)/kubeconfig

        ARGOCD_PASSWORD=$(oc get secret argocd-secret -n $(params.argocd-namespace) -o jsonpath='{.data.admin\.password}' | base64 -d)
        echo $ARGOCD_PASSWORD > $(workspaces.argocd-dir.path)/secret

        ARGOCD_SERVER=$(oc get configMap argocd-cm -n $(params.argocd-namespace) -o jsonpath='{.data.url}' | sed 's/^https:\/\///')
        echo $ARGOCD_SERVER > $(workspaces.argocd-dir.path)/server

    - name: argocd
      image: quay.io/argoproj/argocd:$(params.argocd-version)
      script: |
        export ARGOCD_PASSWORD=$(workspaces.argocd-dir.path)/secret
        export ARGOCD_SERVER=$(workspaces.argocd-dir.path)/server
        yes | argocd login "$ARGOCD_SERVER" --username="admin" --password="$ARGOCD_PASSWORD"
        argocd app set "$(params.student-workspace)" --path "$(params.challenge)" "$(params.flags)"
        argocd app wait "$(params.student-workspace)" --health --sync "$(params.flags)"
